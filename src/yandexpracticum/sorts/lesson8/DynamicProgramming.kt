package yandexpracticum.sorts.lesson8

/**
 * Динамическое программирование (ДП) — это не конкретный алгоритм,
 * а техника, которая позволяет эффективно решать довольно широкий класс задач.
 *
 * Задача. Дан массив из N целых чисел arr. Найдите длину максимальной
 * возрастающей подпоследовательности в этом массиве. Например, при
 * arr=[2, 3, 6, 4, 1, 3, 5, 4, 7] искомая подпоследовательность —
 * [2, 3, 4, 5, 7] и поэтому ответ равен 5.
 *
 * Очень неформально можно сказать, что метод ДП заключается в том,
 * чтобы найти некоторую вспомогательную величину, которая:
 *  1) помогает получить ответ на задачу,
 *  2) считается понятным образом.
 *
 * Попробуем понять, что может являться такой величиной для данной задачи.
 *
 *
 * Метод динамического программирования состоит в том, чтобы ответить на следующие вопросы:
 * 1) Что является состоянием?
 *  В нашем случае это та вспомогательная величина,
 *  которую мы хотим найти. То есть длина максимальной возрастающей
 *  подпоследовательности, заканчивающаяся элементом на позиции i.
 * 2) Как переходить между состояниями?
 *  Вычисляем dp в порядке возрастания i по правилу
 *  dp[i] = max(dp[j], для j < i, arr[j] < arr[i]) + 1.
 * 3) Что является начальным состоянием?
 *  dp[0] = 1
 * 4) Что является ответом на задачу? (где искать, после отработки алгоритма)
 *  max(dp)
 *
 *  same, but in more convienient (for me) way:
 *  1) Let dp[i] (i = 0, 1, .. len(arr)), saving answer of our problem -
 *     max ascending subsequency, that ends on element of i position.
 *  2) Base: dp[0 to len(arr)] = 1
 *  3) Formula
 *  4) Order: 0 to len(arr)
 *  5) Answer: max(dp)
 */